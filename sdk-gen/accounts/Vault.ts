/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import { Asset, assetBeet } from "../types/Asset";
import { State, stateBeet } from "../types/State";

/**
 * Arguments used to create {@link Vault}
 * @category Accounts
 * @category generated
 */
export type VaultArgs = {
  bump: number;
  authority: web3.PublicKey;
  alpha: Asset;
  beta: Asset;
  strategy: web3.PublicKey;
  strategist: web3.PublicKey;
  fixedRate: number;
  state: State;
  startAt: beet.bignum;
  investAt: beet.bignum;
  redeemAt: beet.bignum;
};

const vaultDiscriminator = [211, 8, 232, 43, 2, 152, 117, 119];
/**
 * Holds the data for the {@link Vault} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Vault implements VaultArgs {
  private constructor(
    readonly bump: number,
    readonly authority: web3.PublicKey,
    readonly alpha: Asset,
    readonly beta: Asset,
    readonly strategy: web3.PublicKey,
    readonly strategist: web3.PublicKey,
    readonly fixedRate: number,
    readonly state: State,
    readonly startAt: beet.bignum,
    readonly investAt: beet.bignum,
    readonly redeemAt: beet.bignum
  ) {}

  /**
   * Creates a {@link Vault} instance from the provided args.
   */
  static fromArgs(args: VaultArgs) {
    return new Vault(
      args.bump,
      args.authority,
      args.alpha,
      args.beta,
      args.strategy,
      args.strategist,
      args.fixedRate,
      args.state,
      args.startAt,
      args.investAt,
      args.redeemAt
    );
  }

  /**
   * Deserializes the {@link Vault} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Vault, number] {
    return Vault.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Vault} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<Vault> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find Vault account at ${address}`);
    }
    return Vault.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Deserializes the {@link Vault} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Vault, number] {
    return vaultBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Vault} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return vaultBeet.serialize({
      accountDiscriminator: vaultDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Vault} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: VaultArgs) {
    const instance = Vault.fromArgs(args);
    return vaultBeet.toFixedFromValue({
      accountDiscriminator: vaultDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Vault} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: VaultArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Vault.byteSize(args),
      commitment
    );
  }

  /**
   * Returns a readable version of {@link Vault} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      authority: this.authority.toBase58(),
      alpha: this.alpha,
      beta: this.beta,
      strategy: this.strategy.toBase58(),
      strategist: this.strategist.toBase58(),
      fixedRate: this.fixedRate,
      state: "State." + State[this.state],
      startAt: this.startAt,
      investAt: this.investAt,
      redeemAt: this.redeemAt,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const vaultBeet = new beet.FixableBeetStruct<
  Vault,
  VaultArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["bump", beet.u8],
    ["authority", beetSolana.publicKey],
    ["alpha", assetBeet],
    ["beta", assetBeet],
    ["strategy", beetSolana.publicKey],
    ["strategist", beetSolana.publicKey],
    ["fixedRate", beet.u16],
    ["state", stateBeet],
    ["startAt", beet.u64],
    ["investAt", beet.u64],
    ["redeemAt", beet.u64],
  ],
  Vault.fromArgs,
  "Vault"
);
